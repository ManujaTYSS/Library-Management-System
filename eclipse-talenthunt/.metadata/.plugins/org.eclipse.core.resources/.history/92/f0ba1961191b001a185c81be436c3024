package com.tyss.talunthunt;

import static org.junit.Assert.assertEquals;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.junit.runner.RunWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.stubbing.OngoingStubbing;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.test.context.junit4.SpringRunner;

import com.tyss.talunthunt.dao.AddRequirementDAOImpl;
import com.tyss.talunthunt.dto.AddRequirements;
import com.tyss.talunthunt.service.ServiceDAOImpl;

@ExtendWith(MockitoExtension.class)
@RunWith(SpringRunner.class)
@SpringBootTest
public class ControllerTest {
	@Autowired
	private ServiceDAOImpl service;
	 @MockBean
	private AddRequirementDAOImpl requirment;
	 
//	 new AddRequirements("2018-11-13","Tyss","vikas","FRONT END DESIGN TECHNOLOGY LIKE ANGULRA, NODE , CSS, JS,TS","usa",120,"2018-10-01",3.5,"FRONT END DEVELOPER","full stack"
//	 public void registerAddrequirementTest() {
//		 when(requirment.addrequirement(reqinfo)
//	 }
	
	
 @Test
	 public void getAllRequirment() {
	 List<AddRequirements> list = new ArrayList<AddRequirements>();
	 AddRequirements a1 = new AddRequirements();
//when(requirment.getAllRequirements().thenReturn(Stream.of()).collect(Collectors.toList())));
	 a1.setCdate(new Date());
	 a1.setClient("tyss");
	 a1.setJd("good communication");
	 a1.setClientId("ty_1");
	 a1.setContact("vikas");
	 a1.setOdate(new Date());
	 a1.setNop(23);
	 a1.setRate(3.5);
	 a1.setRole("developer");
	 a1.setTechnology("java full stack");
	 a1.setLocation("Bangalore");
	 list.add(a1);
	 when(((OngoingStubbing) requirment.getAllRequirements()).thenReturn(list));
	assertEquals(1, service.getAllRequirements().size());
 }
	 
//	 @Autowired
//	 private MockMvc mvc;
//	 @Test
//	 public void getAllReq() throws Exception 
//	 {
//		
//	   mvc.perform( MockMvcRequestBuilders
//	       .get("/get-all")
//	       .accept(MediaType.APPLICATION_JSON))
//	       .andDo(print())
//	       .andExpect(status().isOk())
//	       .andExpect(MockMvcResultMatchers.jsonPath("$.get-all").exists())
//	       .andExpect(MockMvcResultMatchers.jsonPath("$.get-all[*].clientId").isNotEmpty());
//	 }
//	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
}
