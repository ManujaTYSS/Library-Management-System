package com.tyss.talunthunt;

import static org.junit.Assert.assertEquals;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.test.web.servlet.MockMvc;

import com.tyss.talunthunt.controller.AddRequirementController;
import com.tyss.talunthunt.dao.AddRequirementInfoDAO;
import com.tyss.talunthunt.dto.AddRequirements;
import com.tyss.talunthunt.service.ServiceDAOImpl;
@RunWith(SpringRunner.class)
@WebMvcTest(AddRequirementController.class)
//@SpringBootTest
class ControllerAddReqTest {
	@Autowired
	private MockMvc mockMvc;
	@Test
	public void getReq() throws Exception {
		mockMvc.perform(get("/addrequirement")).andExpect(status().isOk())
				.andExpect(content().contentType("application/json;charset=UTF-8"))
				.andExpect(jsonPath("$.clientId").value("TY_TYSS_jfs_1")).andExpect(jsonPath("$.client").value("TYSS"))
				.andExpect(jsonPath("$.technology").value("jfs")).andExpect(jsonPath("$.yoe").value(3.5)).andExpect(jsonPath("$.location").value("bangalore")).andExpect(jsonPath("$.nop").value(25))
				.andExpect(jsonPath("$.odate").value("2019-05-12")).andExpect(jsonPath("$.cdate").value("2019-05-21")).andExpect(jsonPath("$.role").value("developer")).andExpect(jsonPath("$.rate").value(3.5)).andExpect(jsonPath("$.jd").value("bangalore good communication"));

	}
	
	 @InjectMocks
	private ServiceDAOImpl service;
	 @Mock
	private AddRequirementInfoDAO dao;

	 @BeforeEach
		public void init() {
			MockitoAnnotations.initMocks(this);
		}
	
	@Test
	 public void getAllRequirment() {
	 List<AddRequirements> list = new ArrayList<AddRequirements>();
	 AddRequirements a1 = new AddRequirements();
	 a1.setCdate(new Date());
	 a1.setClient("tyss");
	 a1.setJd("good communication");
	 a1.setClientId("ty_1");
	 a1.setContact("vikas");
	 a1.setOdate(new Date());
	 a1.setNop(23);
	 a1.setRate(3.5);
	 a1.setRole("developer");
	 a1.setTechnology("java full stack");
	 a1.setLocation("Bangalore");
	 list.add(a1);
	 when(dao.getAllRequirements()).thenReturn(list);
	List<AddRequirements> result = service.getAllRequirements();
	assertEquals(1, result.size());
	//verify(dao, ((AddRequirementInfoDAO) times(1)).getAllRequirements());
	}

}
