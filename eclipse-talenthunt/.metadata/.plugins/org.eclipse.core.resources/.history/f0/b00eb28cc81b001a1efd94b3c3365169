package com.tyss.talunthunt;

import static org.junit.Assert.assertEquals;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.junit.Assert;
import org.junit.Before;
import org.junit.jupiter.api.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.http.MediaType;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.MvcResult;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;
import org.springframework.web.context.WebApplicationContext;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.tyss.talunthunt.dao.AddRequirementInfoDAO;
import com.tyss.talunthunt.dto.AddRequirements;
import com.tyss.talunthunt.dto.Response;
import com.tyss.talunthunt.service.ServiceDAO;


@RunWith(SpringRunner.class)
@SpringBootTest
public class ControllerTest {


	private MockMvc mockMvc;
	@Autowired
	private WebApplicationContext context;

	ObjectMapper om = new ObjectMapper();

	@Before
	public void setUp() {
		mockMvc = MockMvcBuilders.webAppContextSetup(context).build();
	}
	@Before
	public void init() {
		MockitoAnnotations.initMocks(this);
	}


	@Test
	public void addTest() throws Exception {
		AddRequirements a1 = new AddRequirements();
		a1.setCdate(new Date());
		a1.setClient("tyss");
		a1.setJd("good communication");
		a1.setClientId("ty_1");
		a1.setContact("vikas");
		a1.setOdate(new Date());
		a1.setNop(23);
		a1.setRate(3.5);
		a1.setRole("developer");
		a1.setTechnology("java full stack");
		a1.setLocation("Bangalore");
		String jsonRequest = om.writeValueAsString(a1);
		MvcResult result = mockMvc.perform(post("/talenthunt/addrequirement").content(jsonRequest)
				.contentType(MediaType.APPLICATION_JSON_VALUE)).andExpect(status().isOk()).andReturn();
		String resultContent = result.getResponse().getContentAsString();
		Response response = om.readValue(resultContent, Response.class);
		Assert.assertTrue(response.isStatus()==Boolean.TRUE);
	}
//
//
//	@Test
//	public void getReq() throws Exception {
//		mockMvc.perform(get("/addrequirement")).andExpect(status().isOk())
//				.andExpect(content().contentType("application/json;charset=UTF-8"))
//				.andExpect(jsonPath("$.clientId").value("TY_TYSS_jfs_1")).andExpect(jsonPath("$.client").value("TYSS"))
//				.andExpect(jsonPath("$.technology").value("jfs")).andExpect(jsonPath("$.yoe").value(3.5)).andExpect(jsonPath("$.location").value("bangalore")).andExpect(jsonPath("$.nop").value(25))
//				.andExpect(jsonPath("$.odate").value("2019-05-12")).andExpect(jsonPath("$.cdate").value("2019-05-21")).andExpect(jsonPath("$.role").value("developer")).andExpect(jsonPath("$.rate").value(3.5)).andExpect(jsonPath("$.jd").value("bangalore good communication"));
//
//	}
	 @InjectMocks
	private ServiceDAO service;
	 @Mock
	private AddRequirementInfoDAO dao;

	
	@Test
	 public void getAllRequirment() {
	 List<AddRequirements> list = new ArrayList<AddRequirements>();
	 AddRequirements a1 = new AddRequirements();
	 a1.setCdate(new Date());
	 a1.setClient("tyss");
	 a1.setJd("good communication");
	 a1.setClientId("ty_1");
	 a1.setContact("vikas");
	 a1.setOdate(new Date());
	 a1.setNop(23);
	 a1.setRate(3.5);
	 a1.setRole("developer");
	 a1.setTechnology("java full stack");
	 a1.setLocation("Bangalore");
	 list.add(a1);
	 when(dao.getAllRequirements()).thenReturn(list);
	List<AddRequirements> result = service.getAllRequirements();
	assertEquals(1, result.size());
	verify(dao, ((AddRequirementInfoDAO) times(1)).getAllRequirements());
	}


}
